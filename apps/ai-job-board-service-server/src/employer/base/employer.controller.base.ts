/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployerService } from "../employer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployerCreateInput } from "./EmployerCreateInput";
import { Employer } from "./Employer";
import { EmployerFindManyArgs } from "./EmployerFindManyArgs";
import { EmployerWhereUniqueInput } from "./EmployerWhereUniqueInput";
import { EmployerUpdateInput } from "./EmployerUpdateInput";
import { JobPostFindManyArgs } from "../../jobPost/base/JobPostFindManyArgs";
import { JobPost } from "../../jobPost/base/JobPost";
import { JobPostWhereUniqueInput } from "../../jobPost/base/JobPostWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployerControllerBase {
  constructor(
    protected readonly service: EmployerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employer })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmployer(
    @common.Body() data: EmployerCreateInput
  ): Promise<Employer> {
    return await this.service.createEmployer({
      data: data,
      select: {
        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Employer] })
  @ApiNestedQuery(EmployerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employers(@common.Req() request: Request): Promise<Employer[]> {
    const args = plainToClass(EmployerFindManyArgs, request.query);
    return this.service.employers({
      ...args,
      select: {
        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employer(
    @common.Param() params: EmployerWhereUniqueInput
  ): Promise<Employer | null> {
    const result = await this.service.employer({
      where: params,
      select: {
        company: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmployer(
    @common.Param() params: EmployerWhereUniqueInput,
    @common.Body() data: EmployerUpdateInput
  ): Promise<Employer | null> {
    try {
      return await this.service.updateEmployer({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployer(
    @common.Param() params: EmployerWhereUniqueInput
  ): Promise<Employer | null> {
    try {
      return await this.service.deleteEmployer({
        where: params,
        select: {
          company: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/jobPosts")
  @ApiNestedQuery(JobPostFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "read",
    possession: "any",
  })
  async findJobPosts(
    @common.Req() request: Request,
    @common.Param() params: EmployerWhereUniqueInput
  ): Promise<JobPost[]> {
    const query = plainToClass(JobPostFindManyArgs, request.query);
    const results = await this.service.findJobPosts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,

        employer: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobPosts")
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "update",
    possession: "any",
  })
  async connectJobPosts(
    @common.Param() params: EmployerWhereUniqueInput,
    @common.Body() body: JobPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPosts: {
        connect: body,
      },
    };
    await this.service.updateEmployer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobPosts")
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "update",
    possession: "any",
  })
  async updateJobPosts(
    @common.Param() params: EmployerWhereUniqueInput,
    @common.Body() body: JobPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPosts: {
        set: body,
      },
    };
    await this.service.updateEmployer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobPosts")
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "update",
    possession: "any",
  })
  async disconnectJobPosts(
    @common.Param() params: EmployerWhereUniqueInput,
    @common.Body() body: JobPostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobPosts: {
        disconnect: body,
      },
    };
    await this.service.updateEmployer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
