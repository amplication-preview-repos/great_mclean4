/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobPost } from "./JobPost";
import { JobPostCountArgs } from "./JobPostCountArgs";
import { JobPostFindManyArgs } from "./JobPostFindManyArgs";
import { JobPostFindUniqueArgs } from "./JobPostFindUniqueArgs";
import { CreateJobPostArgs } from "./CreateJobPostArgs";
import { UpdateJobPostArgs } from "./UpdateJobPostArgs";
import { DeleteJobPostArgs } from "./DeleteJobPostArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { Employer } from "../../employer/base/Employer";
import { JobPostService } from "../jobPost.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobPost)
export class JobPostResolverBase {
  constructor(
    protected readonly service: JobPostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "read",
    possession: "any",
  })
  async _jobPostsMeta(
    @graphql.Args() args: JobPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobPost])
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "read",
    possession: "any",
  })
  async jobPosts(
    @graphql.Args() args: JobPostFindManyArgs
  ): Promise<JobPost[]> {
    return this.service.jobPosts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobPost, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "read",
    possession: "own",
  })
  async jobPost(
    @graphql.Args() args: JobPostFindUniqueArgs
  ): Promise<JobPost | null> {
    const result = await this.service.jobPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobPost)
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "create",
    possession: "any",
  })
  async createJobPost(
    @graphql.Args() args: CreateJobPostArgs
  ): Promise<JobPost> {
    return await this.service.createJobPost({
      ...args,
      data: {
        ...args.data,

        employer: args.data.employer
          ? {
              connect: args.data.employer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobPost)
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "update",
    possession: "any",
  })
  async updateJobPost(
    @graphql.Args() args: UpdateJobPostArgs
  ): Promise<JobPost | null> {
    try {
      return await this.service.updateJobPost({
        ...args,
        data: {
          ...args.data,

          employer: args.data.employer
            ? {
                connect: args.data.employer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobPost)
  @nestAccessControl.UseRoles({
    resource: "JobPost",
    action: "delete",
    possession: "any",
  })
  async deleteJobPost(
    @graphql.Args() args: DeleteJobPostArgs
  ): Promise<JobPost | null> {
    try {
      return await this.service.deleteJobPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Application], { name: "applications" })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @graphql.Parent() parent: JobPost,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employer, {
    nullable: true,
    name: "employer",
  })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "any",
  })
  async getEmployer(
    @graphql.Parent() parent: JobPost
  ): Promise<Employer | null> {
    const result = await this.service.getEmployer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
